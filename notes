Simulated | OpCode | Function/Register Code | Instruction Type | Mnemonic | Description

          | 000000 |     00_0000            |       R          | NOOP     | performs no operation, check if first register (destination register) is $0
          | 000000 |     00_0000            |       R          | SLL      | shifts second register value by amount specified to the left and shift zeros in, store in first register
          | 000000 |     00_0010            |       R          | SRL      | shift right logical, shifts second register value right by shift amount and zeros shifted in, store in first register
          | 000000 |     00_0011            |       R          | SRA      | shift right arithmetic, shifts second register value right by shift amount, sign bit shifted in, store in first register
          | 000000 |     00_0100            |       R          | SLLV     | shifts second register value left by value in third register, store in first register
          | 000000 |     00_0110            |       R          | SRLV     | shift right logical variable, shifts second register right by value in third register and zeros shifted in, store in first register
          | 000000 |     01_0000            |       R          | MFHI     | contents of HI moved to specified register
          | 000000 |     01_0010            |       R          | MFLO     | contents of LO moved to specified register
          | 000000 |     01_1000            |       R          | MULT     | multiply registers and store in LO
          | 000000 |     01_1001            |       R          | MULTU    | multiply unsigned registers and store in LO
          | 000000 |     01_1010            |       R          | DIV      | divides first register by second register, quotient in LO and remainder in HI
          | 000000 |     01_1011            |       R          | DIVU     | divides, unsigned, first register by second register, quotient in LO and remainder in HI
          | 000000 |     10_0000            |       R          | ADD      | add second and third registers with overflow, store in first register
          | 000000 |     10_0001            |       R          | ADDU     | add unsigned second and third registers with no overflow, store in first register
          | 000000 |     10_0010            |       R          | SUB      | subtract third register from second register, store in first register
          | 000000 |     10_0011            |       R          | SUBU     | subtract unsigned third register from second register, store in first register
          | 000000 |     10_0100            |       R          | AND      | and bitwise second and third registers, store in first register
          | 000000 |     10_0101            |       R          | OR       | or bitwise second and third registers, store in first register
          | 000000 |     10_0110            |       R          | XOR      | exclusive or bitwise second and third registers, store in first register
          | 000000 |     10_1010            |       R          | SLT      | set on less than signed, if second register is less than third register, first register is 1, 0 otherwise
          | 000000 |     10_1011            |       R          | SLTU     | set on less than unsigned, if second register is less than third register, first register is 1, 0 otherwise
          | 001000 |     x_xxxx             |       I          | ADDI     | add second register and sign-extended immediate with overflow, store in first register
          | 001001 |     x_xxxx             |       I          | ADDIU    | add unsigned second register and sign-extended immediate value with no overflow, store in first register
          | 001010 |     x_xxxx             |       I          | SLTI     | set on less than immediate signed, if second register is less than immediate, first register is 1, 0 otherwise
          | 001011 |     x_xxxx             |       I          | SLTIU    | set on less than unsigned, if second register is less than unsigned immediate , first register is 1, 0 otherwise


ALUSimulator( RegisterFile theRegisterFile,
     uint32_t OpCode,
     uint32_t Rs, uint32_t Rt, uint32_t Rd,
     uint32_t ShiftAmt,
     uint32_t FunctionCode,
     uint32_t ImmediateValue,
     uint32_t* Status );


25 operands
